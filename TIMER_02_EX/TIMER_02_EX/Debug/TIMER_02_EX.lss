
TIMER_02_EX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000188  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000830  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	41 c0       	rjmp	.+130    	; 0xc4 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	32 c0       	rjmp	.+100    	; 0x110 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

unsigned int count8ms = 0;

int main(void)
{
	DDRA = 0xFF; //LED쓸건데 얘들이 A포트에 있으니깐 활성화 시킨겨 1이 출력모드니깐.
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	
	TCNT0 = 131; //공식 : 주기 = prescaler/16000000 * (256 - TCNT)인데 주기가 8이니깐 대충 맞게 조율하면 prescaler = 1024, TCNT0 = 131 넣어야 맞음
  b2:	93 e8       	ldi	r25, 0x83	; 131
  b4:	92 bf       	out	0x32, r25	; 50
	TCCR0 = 0x07; //TCCR0 register -> 00000111이면 1024를 의미 표 보면됨.
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	93 bf       	out	0x33, r25	; 51
	TIMSK = 0x01; //오버플로우 인터럽트 활성화 얘를 해줘야 오버플로우 쓸 수 있음
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	97 bf       	out	0x37, r25	; 55
	PORTA = 0xFF;
  be:	8b bb       	out	0x1b, r24	; 27
	sei();//인터럽트 활성화
  c0:	78 94       	sei
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x14>

000000c4 <__vector_16>:
    while (1) 
    {
    }
}

ISR(TIMER0_OVF_vect){ //오버플로우 날때마다 인터럽트 실행
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	count8ms++; // 8ms 마다 인터럽트 실행되면서 1씩 늘려감
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (count8ms == 125) //8*125=1000 -> 1초 되니깐 이렇게 1초를 표현할 수 있음.
  e4:	8d 37       	cpi	r24, 0x7D	; 125
  e6:	91 05       	cpc	r25, r1
  e8:	61 f4       	brne	.+24     	; 0x102 <__vector_16+0x3e>
	{
		if(PINA==0xFF){ //켜져있으면
  ea:	89 b3       	in	r24, 0x19	; 25
  ec:	8f 3f       	cpi	r24, 0xFF	; 255
  ee:	11 f4       	brne	.+4      	; 0xf4 <__vector_16+0x30>
			PORTA = 0x00; //끄기
  f0:	1b ba       	out	0x1b, r1	; 27
  f2:	05 c0       	rjmp	.+10     	; 0xfe <__vector_16+0x3a>
		}
		else if (PINA == 0x00){ //꺼져 있으면
  f4:	89 b3       	in	r24, 0x19	; 25
  f6:	81 11       	cpse	r24, r1
  f8:	02 c0       	rjmp	.+4      	; 0xfe <__vector_16+0x3a>
			PORTA = 0xFF; //켜기
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8b bb       	out	0x1b, r24	; 27
		}
		TCNT0 = 131; //오버플로우 났다는건 top 찍었다는 거니간 다시 시작하도록 초기화 해줌.
  fe:	83 e8       	ldi	r24, 0x83	; 131
 100:	82 bf       	out	0x32, r24	; 50
	}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
